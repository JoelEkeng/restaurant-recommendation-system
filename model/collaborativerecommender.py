# -*- coding: utf-8 -*-
"""CollaborativeRecommender.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GI4Nu_XjDwr5-HVzJw6PpcIDTwcMB_Gz

### Colaborative Filtering
"""

# Perform collaborative filtering on PA businesses

# Create a Surprise Reader object, specifying the rating scale
reader = Reader(rating_scale=(1, 5))

# Load the data into a Surprise Dataset
data = Dataset.load_from_df(pa_businesses[['user_id', 'business_id', 'rating']], reader)

# Split the data into training and testing sets
trainset, testset = train_test_split(data, test_size=0.25, random_state=42)

# Train an SVD model
algo = SVD()
algo.fit(trainset)

# Make predictions on the test set
predictions = algo.test(testset)

# Evaluate the model
accuracy.rmse(predictions)

# Function to get collaborative filtering recommendations
def get_collaborative_recommendations(user_ids, algo=algo, data=pa_businesses):
    """Generate restaurant recommendations for multiple users based on collaborative filtering."""
    recommendations = {}
    for user_id in user_ids:
        business_ids = data['business_id'].unique()
        preds = [algo.predict(user_id, business_id) for business_id in business_ids]
        preds.sort(key=lambda x: x.est, reverse=True)
        top_business_ids = [pred.iid for pred in preds[:10]]
        top_recommendations = data[data['business_id'].isin(top_business_ids)][['business_id', 'name']].drop_duplicates()
        recommendations[user_id] = top_recommendations
    return recommendations

# Example usage
unique_users = pa_businesses['user_id'].unique()
user_ids_to_recommend = unique_users[:4]  # Get recommendations for the first 3 users
recommendations = get_collaborative_recommendations(user_ids_to_recommend)

for user_id, recs in recommendations.items():
    print(f"\nCollaborative Filtering Recommendations for user {user_id}:\n")
    print(recs.to_string(index=False))
    print("\n" + "-" * 50 + "\n")